<font face="宋体"><strong><font face="Arial, Helvetica, sans-serif"><!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HTTP安全头检测工具</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a2980, #26d0ce);
            color: #333;
            line-height: 1.6;
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1000px;
            margin: 0 auto;
        }
        
        header {
            text-align: center;
            padding: 30px 0;
            color: white;
        }
        
        h1 {
            font-size: 2.8rem;
            margin-bottom: 10px;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }
        
        .subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
            max-width: 600px;
            margin: 0 auto;
        }
        
        .card {
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
            margin-bottom: 30px;
        }
        
        .card-header {
            background: #2d3748;
            color: white;
            padding: 20px;
            text-align: center;
            font-size: 1.4rem;
        }
        
        .card-body {
            padding: 30px;
        }
        
        .input-group {
            display: flex;
            margin-bottom: 20px;
        }
        
        .url-input {
            flex: 1;
            padding: 15px;
            border: 2px solid #e2e8f0;
            border-radius: 8px 0 0 8px;
            font-size: 16px;
            transition: border-color 0.3s;
        }
        
        .url-input:focus {
            outline: none;
            border-color: #4299e1;
        }
        
        .scan-btn {
            background: #4299e1;
            color: white;
            border: none;
            padding: 0 25px;
            border-radius: 0 8px 8px 0;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: background 0.3s;
        }
        
        .scan-btn:hover {
            background: #3182ce;
        }
        
        .scan-btn:disabled {
            background: #a0aec0;
            cursor: not-allowed;
        }
        
        .results {
            display: none;
            margin-top: 30px;
        }
        
        .result-header {
            text-align: center;
            margin-bottom: 25px;
            color: #2d3748;
        }
        
        .header-result {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            margin-bottom: 12px;
            border-radius: 8px;
            background: #f7fafc;
            border-left: 5px solid #e53e3e;
        }
        
        .header-result.good {
            border-left-color: #38a169;
        }
        
        .header-result.warning {
            border-left-color: #ed8936;
        }
        
        .header-name {
            font-weight: 600;
            color: #2d3748;
        }
        
        .header-value {
            color: #4a5568;
            font-family: monospace;
            margin-top: 5px;
            font-size: 14px;
        }
        
        .status {
            display: flex;
            align-items: center;
            font-weight: 600;
        }
        
        .status.missing {
            color: #e53e3e;
        }
        
        .status.present {
            color: #38a169;
        }
        
        .status.warning {
            color: #ed8936;
        }
        
        .loading {
            text-align: center;
            display: none;
            padding: 20px;
        }
        
        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #4299e1;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .summary {
            background: #ebf8ff;
            padding: 20px;
            border-radius: 8px;
            margin-top: 25px;
        }
        
        .summary h3 {
            color: #2b6cb0;
            margin-bottom: 15px;
        }
        
        .score {
            font-size: 2.5rem;
            font-weight: 700;
            color: #2b6cb0;
            text-align: center;
            margin: 15px 0;
        }
        
        .info {
            background: #e6fffa;
            padding: 20px;
            border-radius: 8px;
            margin-top: 25px;
        }
        
        .info h3 {
            color: #2c7a7b;
            margin-bottom: 15px;
        }
        
        footer {
            text-align: center;
            margin-top: 40px;
            color: white;
            opacity: 0.8;
        }
        
        @media (max-width: 768px) {
            .input-group {
                flex-direction: column;
            }
            
            .url-input {
                border-radius: 8px;
                margin-bottom: 10px;
            }
            
            .scan-btn {
                border-radius: 8px;
                padding: 15px;
            }
            
            h1 {
                font-size: 2.2rem;
            }
            
            .header-result {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .status {
                margin-top: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>HTTP安全头检测工具</h1>
            <p class="subtitle">快速检测网站的安全头设置，提升Web安全性</p >
        </header>
        
        <div class="card">
            <div class="card-header">
                <i class="fas fa-shield-alt"></i> 安全检测
            </div>
            <div class="card-body">
                <div class="input-group">
                    <input type="url" class="url-input" id="urlInput" placeholder="输入要检测的URL (例如: https://example.com)">
                    <button class="scan-btn" id="scanBtn">开始检测</button>
                </div>
                
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <p>正在检测安全头配置，请稍候...</p >
                </div>
                
                <div class="results" id="results">
                    <h2 class="result-header">检测结果</h2>
                    <div id="resultsContainer"></div>
                    
                    <div class="summary">
                        <h3>安全评分</h3>
                        <div class="score" id="securityScore">B</div>
                        <p>此评分基于检测到的安全头数量和配置质量。A为最高评分，F为最低评分。</p >
                    </div>
                    
                    <div class="info">
                        <h3>为什么HTTP安全头很重要？</h3>
                        <p>HTTP安全头是保护网站和用户的重要安全措施。它们可以防止点击劫持、跨站脚本（XSS）攻击、数据注入等常见网络攻击。正确配置安全头是Web应用安全的基本要求。</p >
                    </div>
                </div>
            </div>
        </div>
        
        <footer>
          
        </footer>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const urlInput = document.getElementById('urlInput');
            const scanBtn = document.getElementById('scanBtn');
            const loading = document.getElementById('loading');
            const results = document.getElementById('results');
            const resultsContainer = document.getElementById('resultsContainer');
            const securityScore = document.getElementById('securityScore');
            
            // 模拟的安全头数据（实际应用中应该通过API获取真实数据）
            const mockSecurityHeaders = {
                "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
                "X-Content-Type-Options": "nosniff",
                "X-Frame-Options": "DENY",
                "X-XSS-Protection": "1; mode=block",
                "Content-Security-Policy": "default-src 'self'",
                "Referrer-Policy": "strict-origin-when-cross-origin",
                "Permissions-Policy": "geolocation=(self), microphone=()"
            };
            
            // 检测按钮点击事件
            scanBtn.addEventListener('click', function() {
                const url = urlInput.value.trim();
                
                if (!url) {
                    alert('请输入要检测的URL');
                    return;
                }
                
                // 验证URL格式
                try {
                    new URL(url);
                } catch (e) {
                    alert('请输入有效的URL（包含http://或https://）');
                    return;
                }
                
                // 显示加载状态
                loading.style.display = 'block';
                results.style.display = 'none';
                scanBtn.disabled = true;
                
                // 模拟API请求延迟
                setTimeout(() => {
                    // 隐藏加载状态，显示结果
                    loading.style.display = 'none';
                    results.style.display = 'block';
                    scanBtn.disabled = false;
                    
                    // 生成检测结果
                    generateResults(url);
                }, 2000);
            });
            
            // 生成检测结果
            function generateResults(url) {
                resultsContainer.innerHTML = '';
                
                // 安全头列表及其推荐值
                const headersToCheck = [
                    { name: "Strict-Transport-Security", recommended: "max-age=31536000" },
                    { name: "X-Content-Type-Options", recommended: "nosniff" },
                    { name: "X-Frame-Options", recommended: "DENY" },
                    { name: "X-XSS-Protection", recommended: "1; mode=block" },
                    { name: "Content-Security-Policy", recommended: "" },
                    { name: "Referrer-Policy", recommended: "" },
                    { name: "Permissions-Policy", recommended: "" }
                ];
                
                let presentCount = 0;
                
                headersToCheck.forEach(header => {
                    const value = mockSecurityHeaders[header.name] || null;
                    const isPresent = value !== null;
                    const isRecommended = header.recommended ? value && value.includes(header.recommended) : true;
                    
                    if (isPresent) presentCount++;
                    
                    const headerElement = document.createElement('div');
                    headerElement.className = `header-result ${isPresent ? (isRecommended ? 'good' : 'warning') : ''}`;
                    
                    headerElement.innerHTML = `
                        <div>
                            <div class="header-name">${header.name}</div>
                            <div class="header-value">${value || '未设置'}</div>
                        </div>
                        <div class="status ${isPresent ? (isRecommended ? 'present' : 'warning') : 'missing'}">
                            ${isPresent ? (isRecommended ? '✓ 良好' : '⚠ 需改进') : '✗ 缺失'}
                        </div>
                    `;
                    
                    resultsContainer.appendChild(headerElement);
                });
                
                // 计算安全评分
                const score = calculateScore(presentCount, headersToCheck.length);
                securityScore.textContent = score;
            }
            
            // 计算安全评分
            function calculateScore(presentCount, totalCount) {
                const percentage = (presentCount / totalCount) * 100;
                
                if (percentage >= 85) return 'A';
                if (percentage >= 70) return 'B';
                if (percentage >= 55) return 'C';
                if (percentage >= 40) return 'D';
                return 'F';
            }
            
            // 示例URLs
            const exampleUrls = [
                "https://example.com",
                "https://google.com",
                "https://github.com"
            ];
             
            // 随机选择一个示例URL作为占位符
            urlInput.placeholder = `输入要检测的URL (例如: ${exampleUrls[Math.floor(Math.random() * exampleUrls.length)]})`;
        });
    </script>
</body>
</html></font></strong></font>
